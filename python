#4). Python:
#Q4.1) Factorial Program in Python.

num = int(input("Enter a number: "))
factorial = 1

# check if the number is negative, positive or zero
if num < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("The factorial of 0 is 1")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print("The factorial of",num,"is",factorial)

#Q4.2) Automorphic number or not. For example, 5 is an automorphic number, 5*5 =25. The last digit is 5 which same as the given number.
It has only a positive single-digit number. If the number is not valid, it should display "Invalid input".


num = int(input("Enter a number: "))
if num < 1 or num > 9:  # Check if the number is a single-digit positive number
    print("Invalid input")
else:
    square = num * num
    if square % 10 == num:
        print("Automorphic Number")
    else:
        print("Not an Automorphic Number")

#Q4.3)  Print the following pattern:
#0
#0 1
#0 1 2
#0 1 2 3
#0 1 2 3 4

for i in range(5):  # Loop for rows (0 to 4)
    for j in range(i + 1):  # Loop for printing numbers in each row
        print(j, end=" ")
    print()  # Move to the next line

#Q4.4)  Write a Program to Implement a Stack The program creates a stack and allows users to perform push and pop operations on it. (implement using class)

class Stack:
    def __init__(self):
        self.stack = []  # Initialize an empty list as the stack

    def push(self, item):
        self.stack.append(item)
        print(f"Pushed {item} into the stack")

    def pop(self):
        if not self.is_empty():
            popped_item = self.stack.pop()
            print(f"Popped {popped_item} from the stack")
        else:
            print("Stack is empty! Cannot pop.")

    def is_empty(self):
        return len(self.stack) == 0

    def display(self):
        if self.is_empty():
            print("Stack is empty")
        else:
            print("Stack:", self.stack)

stack = Stack()

while True:
    print("\nOptions:")
    print("1. Push")
    print("2. Pop")
    print("3. Display Stack")
    print("4. Exit")
    
    choice = int(input("Enter your choice: "))

    if choice == 1:
        value = int(input("Enter value to push: "))
        stack.push(value)
    elif choice == 2:
        stack.pop()
    elif choice == 3:
        stack.display()
    elif choice == 4:
        print("Exiting program.")
        break
    else:


#Q4.5) Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C re the candidate numbers sums to T. 
#Example: Given candidate set 2,3,6,7 and target 7, A solution set is: [2, 2, 3] [7]

# Candidate set and target
candidates = [2, 3, 6, 7]
target = 7

# List to store the result combinations
result = []

# Sort candidates (optional, but useful for optimization)
candidates.sort()

# Backtracking approach
def backtrack(remaining, combination, start):
    # Base case: if the remaining target is 0, we found a valid combination
    if remaining == 0:
        result.append(list(combination))
        return
    # If remaining becomes negative, this path is not valid
    elif remaining < 0:
        return
    
    # Try each candidate starting from the 'start' index
    for i in range(start, len(candidates)):
        # Include the candidate in the current combination
        combination.append(candidates[i])
        # Since the same candidate can be used unlimited times, we pass i (not i+1)
        backtrack(remaining - candidates[i], combination, i)
        # Backtrack: remove the last candidate added
        combination.pop()

# Start backtracking with the initial target, empty combination, and starting index 0
backtrack(target, [], 0)

# Display the unique combinations
print("Unique combinations summing to", target, "are:", result)

        print("Invalid choice! Please enter a valid option.")



