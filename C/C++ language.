//Q2.1)  Write Program to Implement a Stack The program creates a stack and allows users to perform push, pop, and display operations on it.
#include <stdio.h>
#define MAX 5  // Maximum size of the stack

int stack[MAX], top = -1;

// Function to push an element onto the stack
void push() {
    int value;
    if (top == MAX - 1) {  // This condition check that there are any space in stack or not
        printf("Stack Overflow! Cannot push.\n");
    } else {
        printf("Enter the value to push: ");
        scanf("%d", &value);
        stack[++top] = value;
        printf("%d pushed onto the stack.\n", value);
    }
}

// Function to pop an element from the stack
void pop() {
    if (top == -1) {
        printf("Stack Underflow! Cannot pop.\n");
    } else {
        printf("%d popped from the stack.\n", stack[top--]);
    }
}

// Function to display the stack
void display() {
    if (top == -1) {
        printf("Stack is empty.\n");
    } else {
        printf("Stack elements: ");
        for (int i = top; i >= 0; i--) {
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

int main() {
    int choice;
    while (1) {
        // Menu options
        printf("\nStack Operations:\n");
        printf("1. Push\n2. Pop\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: push(); break;
            case 2: pop(); break;
            case 3: display(); break;
            case 4: printf("Exiting program.\n"); return 0;
            default: printf("Invalid choice! Try again.\n");
        }
    }
}

//Q2.2)  Write a program to C program to convert 545 numbers from Decimal to Binary.


#include <stdio.h>
#include <string.h>

// Reverse the string
void reverse(char *bin, int left, int right) {
    
    while (left < right) {
        char temp = bin[left];
        bin[left] = bin[right];
        bin[right] = temp;
        left++;
        right--;
    }
}

// function to convert decimal to binary
char* decToBinary(int n) {
    int index = 0;
    char* bin = (char*) malloc(32 * sizeof(char));
  
    while (n > 0) {
        int bit = n % 2;
        bin[index++] = '0' + bit;
        n /= 2;
    }
    bin[index] = '\0';
  
    // Reverse the binary string
    reverse(bin, 0, index-1);
      return bin;
}

int main() {
    int n = 545;
    char* bin = decToBinary(n);
  
    printf("%s", bin);
    return 0;
}
//Q2.3) Given two numbers a and b, the task is to find the GCD of the two numbers?
Input: a = 28, b = 20 
Output: 4 
Explanation: 28 % 20 =8 || 20 % 8 = 4 
#include <stdio.h>

// Function to compute GCD using the Euclidean algorithm
int findGCD(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int a = 20 , b=28;
    // Compute and display GCD
    printf("GCD of %d and %d is %d\n", a, b, findGCD(a, b));

    return 0;
}
//Q2.4) Task: Reverse and Uppercase a String (C++ Console Program) 
//Description: Write a C++ program that mimics an Arduino-style sketch. It takes user input, reverses the string, converts it to uppercase, and prints the output
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

using namespace std;

// Function to convert string to uppercase
void toUpperCase(string &str) {
    for (char &c : str) {
        c = toupper(c);
    }
}

// Function to reverse the string
void reverseString(string &str) {
    reverse(str.begin(), str.end());
}

// Arduino-style setup function
void setup() {
    cout << "Program Started\n";
}

// Arduino-style loop function
void loop() {
    string input;
    cout << "Enter a string: ";
    getline(cin, input);

    // Convert to uppercase
    toUpperCase(input);

    // Reverse the string
    reverseString(input);

    // Print the output
    cout << "Reversed and Uppercased String: " << input << endl;
}

int main() {
    setup(); // Simulating Arduino's setup function

    while (true) { // Simulating Arduino's loop function
        loop();
    }

    return 0;
}
