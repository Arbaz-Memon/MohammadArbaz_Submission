//Q1.1) Write an Embedded C program to multiply any number by 9 in the fastest manner
#include<stdio.h>
int main(){
    int num;
    printf("Enter number: ");
    scanf("%d",&num);
    printf("%d", num*9);
}

//Write a program to print numbers from 1 to 1000 without using conditional operators.

#include <stdio.h>

int printNumbers(int n)
{
    printf("%d\n", n);
    n++;
    (n <= 1000) && printNumbers(n);
}

int main()
{
    printNumbers(1);
    return 0;
}
//Q1.3) Write a MIN macro program that takes two arguments and returns the smallest of both arguments.

//Q1.4) Write a C program to toggle a specific bit (e.g., bit 3) of an 8-bit unsigned integer without changing the other bits. Implement the program using bitwise operations.

#include <stdio.h>

int main() {
    unsigned char num = 0b00001010;
    int bit_to_toggle;
    printf("Enter the bitr yopu want to toggle :");
    scanf("%d",&bit_to_toggle);
    printf("Before Toggle num is %d \n",num);

    // Toggle the specified bit using XOR
    num = num ^ (1 << bit_to_toggle);
    printf("After toggle Number is %d ", num);

    return 0;
}

//Q.1.5) Program to Add Two Complex Numbers
#include <stdio.h>

// Make structure to store real and imeginary part of the number
struct Complex
{
    float real;
    float imag;
};

int main()
{
    struct Complex c1, c2, sum;

    printf("Enter real and imaginary part of first complex number: ");
    scanf("%f %f", &c1.real, &c1.imag);

    printf("Enter real and imaginary part of second complex number: ");
    scanf("%f %f", &c2.real, &c2.imag);

    sum.real = c1.real + c2.real;
    sum.imag = c1.imag + c2.imag;

    printf("Sum of the complex numbers: %f + %fi\n", sum.real, sum.imag);

    return 0;
}
